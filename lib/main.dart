import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart'; // Firebase import
import 'package:google_fonts/google_fonts.dart';
import 'package:tripmanager/View/driver_main_screen.dart';
import 'package:tripmanager/View/login_screen.dart';
import 'package:tripmanager/View/main_screen.dart';
import 'firebase_options.dart'; // This will be generated by Firebase CLI setup

void main() async {
  WidgetsFlutterBinding
      .ensureInitialized(); // Ensures Firebase is initialized correctly
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform, // Firebase initialization
  );
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
        title: 'OGTrans',
        builder: (context, child) {
          return MediaQuery(
            data: MediaQuery.of(context)
                .copyWith(textScaler: TextScaler.linear(0.9)),
            child: child!,
          );
        },
        theme: ThemeData(
          textTheme: GoogleFonts.poppinsTextTheme(),
          primarySwatch: Colors.blue,
          scaffoldBackgroundColor: Colors.white,
        ),
        debugShowCheckedModeBanner: false,
        home: AuthCheck());
  }
}

class AuthCheck extends StatelessWidget {
  static bool isDriver = false;

  Future<bool> checkIfDriver(User? user) async {
    if (user != null) {
      final userDoc = await FirebaseFirestore.instance
          .collection('users')
          .doc(user.uid)
          .get();
      if (userDoc.exists && userDoc.data()?['isDriver'] == true) {
        return true;
      }
    }
    return false;
  }

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      stream: FirebaseAuth.instance.authStateChanges(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return Center(child: CircularProgressIndicator());
        } else if (snapshot.hasData) {
          return FutureBuilder<bool>(
            future: checkIfDriver(snapshot.data),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return Center(child: CircularProgressIndicator());
              } else if (snapshot.hasData && snapshot.data == true) {
                return DriverBottomNavBar();
              } else {
                return BottomNavBar();
              }
            },
          );
        } else {
          return LoginScreen();
        }
      },
    );
  }
}
